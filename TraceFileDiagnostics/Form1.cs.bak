using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Collections;
using System.IO;
using System.Xml.XPath;
using System.Xml;
using NorthStateFramework;
using TimeBeam;
using TimeBeam.Events;
using System.Diagnostics;

namespace ServiceTool
{
    public partial class Form1 : Form
    {
        private const string TimeTag = "Time";
        private const string TraceTag = "Trace";
        private const string TraceLogTag = "TraceLog";
        private const string TraceSaveString = "TraceSave";
        private const string TraceSaveCompleteString = "TraceSaveComplete";
        private const string TraceEventString = "TraceEvent";
        private string traceFileName = string.Empty;
        private DateTime timeSyncDate;
        private int timeSyncMilliSec;
        private int initialTimeStamp;
        private int finalTimeStamp;
        private int longestNameLength;
        private List<Trace> allTraces = new List<Trace>();
        private Dictionary<string, List<Trace>> stateMachine = new Dictionary<string, List<Trace>>();
        private Dictionary<string, List<Trace>> traceList = new Dictionary<string, List<Trace>>();
        private Dictionary<string, List<Trace>> traceData = new Dictionary<string, List<Trace>>();
        private MessageParser mP = new MessageParser();

        private TimeBeamClock _clock = new TimeBeamClock();
        private SciLabUtility sciLab;

        public Form1()
        {
            InitializeComponent();
            sciLab = new SciLabUtility();
            // Register the clock with the timeline
            timeline1.Clock = _clock;
            // Activate the timer that invokes the clock to update.
            timer1.Enabled = true;
        }

        private void btnBrowseFiles_Click(object sender, EventArgs e)
        {

            initialTimeStamp = int.MaxValue;
            finalTimeStamp = 0;
            longestNameLength = 0;

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                traceFileName = openFileDialog.FileName.ToString();
                textBox1.Text = traceFileName;
                buildTraceList(traceFileName);
                sortTraceList();
                foreach (List<Trace> tL in traceList.Values)
                {
                    foreach (Trace t in tL)
                    {
                        if (t.TraceTime > finalTimeStamp)
                            finalTimeStamp = t.TraceTime;
                        else if (t.TraceTime < initialTimeStamp)
                            initialTimeStamp = t.TraceTime;
                    }
                }
                foreach (KeyValuePair<string, List<Trace>> tD in traceList)
                {
                    if (tD.Key.Length >= longestNameLength)
                        longestNameLength = tD.Key.Length;
                    if (!tD.Key.Equals(NSFTraceTags.stateEnteredTag))
                        timeline1.AddTrack(new TraceTrack(tD.Value, initialTimeStamp) { Name = tD.Key });
                }
                foreach (KeyValuePair<string, List<Trace>> tL in stateMachine)
                {
                    if (tL.Key.Length >= longestNameLength)
                        longestNameLength = tL.Key.Length;
                    timeline1.AddTrack(new TraceTrack(tL.Value, initialTimeStamp) { Name = tL.Key });
                }
                
                timeline1.TrackLabelWidth = longestNameLength * 8;

                timeline1.SelectionChanged += TimelineSelectionChanged;

            }
        }

        public void buildTraceList(String filename)
        {
            XPathNavigator docNavigator = getNavigatorForFile(filename);
            docNavigator.MoveToFirstChild();
            traceList = traverseTraceFile(docNavigator, filename);
            
            foreach (Trace t in traceList[NSFTraceTags.informationalTag])
            {
                allTraces.Add(t);
                if (t.TagAndData.ContainsValue("Time"))
                {
                    string date = t.TagAndData["Value"].Split(' ')[0];
                    string time = t.TagAndData["Value"].Split(' ')[1];
                    string amPm = t.TagAndData["Value"].Split(' ')[2];
                    string mSec = time.Split('.')[1];
                    int timeHour = Convert.ToInt32(time.Split(':')[0]);
                    time = time.Split('.')[0];

                    if (amPm.Equals("PM"))
                        timeHour += 12;

                    DateTime d = new DateTime(Convert.ToInt32(date.Split('/')[2]), Convert.ToInt32(date.Split('/')[0]), Convert.ToInt32(date.Split('/')[1]),
                        timeHour, Convert.ToInt32(time.Split(':')[1]), Convert.ToInt32(time.Split(':')[2]), Convert.ToInt32(mSec), DateTimeKind.Utc);

                    timeSyncDate = d;
                    timeSyncMilliSec = t.TraceTime;
                    break;
                }
            }
        }

        /// <summary>
        /// Creates a new XmlDocument for the file, 
        /// loads the file ignoring namespaces, 
        /// closes the file and returns a navigator to the document.
        /// </summary>
        /// <param name="filename">Name of file containing XML data.</param>
        /// <returns>A navigator to the xml contained in the file.</returns>
        public static XPathNavigator getNavigatorForFile(String filename)
        {
            // Create a document and navagator for this data file
            XmlDocument document = new XmlDocument();
            using (XmlTextReader reader = new XmlTextReader(filename))
            {
                reader.Namespaces = false;
                document.Load(reader);
                reader.Close();
            }
            return document.CreateNavigator();
        }

        private static Dictionary<string, List<Trace>> traverseTraceFile(XPathNavigator docNavigator, string currentFilename)
        {
            int lastTraceTime = 0;
            int concurrentTraceTimeCount = 0;
            XPathNodeIterator traceElementIterator;
            Dictionary<string, List<Trace>> list = new Dictionary<string, List<Trace>>();

            if (docNavigator.Name == TraceLogTag)
                traceElementIterator = docNavigator.SelectDescendants(TraceTag, String.Empty, false);
            else
                return list;

            foreach (XPathNavigator traceEntry in traceElementIterator)
            {
                Trace trace = new Trace();
                // Record the timestamp
                traceEntry.MoveToFirstChild();
                trace.getTraceTime(traceEntry);

                if (traceEntry.ValueAsInt == lastTraceTime)
                {
                    trace.TraceTime += ++concurrentTraceTimeCount;
                }
                else
                {
                    lastTraceTime = traceEntry.ValueAsInt;
                    concurrentTraceTimeCount = 0;
                }

                    if (traceEntry.MoveToNext())
                        trace.TraceType = traceEntry.Name;

                traceEntry.MoveToFirstChild();
                do
                {
                    trace.TagAndData.Add(traceEntry.Name, traceEntry.Value);
                } while (traceEntry.MoveToNext());

                if (!list.ContainsKey(trace.TraceType))
                    list.Add(trace.TraceType, new List<Trace>());

                list[trace.TraceType].Add(trace);

            }
            return list;

        }

        private void sortTraceList()
        {
            foreach (KeyValuePair<string, List<Trace>> traceType in traceList)
            {
                listBox1.Items.Add(traceType.Key);

                foreach (Trace t in traceType.Value)
                {
                    if (t.TraceType.Equals(NSFTraceTags.variableTag))
                    {
                        if (t.TagAndData.ContainsKey(NSFTraceTags.objectTag))
                        {
                            if (!traceData.ContainsKey(t.TagAndData[NSFTraceTags.objectTag]))
                            {
                                traceData.Add(t.TagAndData[NSFTraceTags.objectTag], new List<Trace>());
                            }
                            traceData[t.TagAndData[NSFTraceTags.objectTag]].Add(t);
                        }
                        else if (t.TagAndData.ContainsKey(NSFTraceTags.nameTag))
                        {
                            if (!traceData.ContainsKey(t.TagAndData[NSFTraceTags.nameTag]))
                            {
                                traceData.Add(t.TagAndData[NSFTraceTags.nameTag], new List<Trace>());
                            }
                            traceData[t.TagAndData[NSFTraceTags.nameTag]].Add(t);
                        }

                        //NSFTraceTags.nameTag;
                        //NSFTraceTags.valueTag;
                    }
                    else if (t.TraceType.Equals(NSFTraceTags.stateEnteredTag))
                    {
                        if (!stateMachine.ContainsKey(t.TagAndData[NSFTraceTags.stateMachineTag]))
                        {
                            stateMachine.Add(t.TagAndData[NSFTraceTags.stateMachineTag], new List<Trace>());
                            //traceData.Add(t.TagAndData[NSFTraceTags.stateMachineTag], new List<Trace>());
                        }
                        stateMachine[t.TagAndData[NSFTraceTags.stateMachineTag]].Add(t);
                        //traceData[t.TagAndData[NSFTraceTags.stateMachineTag]].Add(t);
                        //NSFTraceTags.stateMachineTag;
                        //NSFTraceTags.stateEnteredTag;
                    }
                    else if (t.TraceType.Equals(NSFTraceTags.eventQueuedTag))
                    {
                        if (!traceData.ContainsKey(t.TagAndData[NSFTraceTags.sourceTag]))
                        {
                            traceData.Add(t.TagAndData[NSFTraceTags.sourceTag], new List<Trace>());
                        }
                        traceData[t.TagAndData[NSFTraceTags.sourceTag]].Add(t);

                        //NSFTraceTags.nameTag;
                        //NSFTraceTags.sourceTag;
                        //NSFTraceTags.destinationTag;
                    }
                    else if (t.TraceType.Equals(NSFTraceTags.messageSentTag))
                    {
                        if (!traceData.ContainsKey(t.TagAndData[NSFTraceTags.sourceTag]))
                        {
                            traceData.Add(t.TagAndData[NSFTraceTags.sourceTag], new List<Trace>());
                        }
                        mP.setMessage(t.TagAndData[NSFTraceTags.messageTag]);

                        t.TagAndData.Add("Parsed Message", mP.parseMessage());
                        traceData[t.TagAndData[NSFTraceTags.sourceTag]].Add(t);

                        //NSFTraceTags.sourceTag;
                        //NSFTraceTags.messageTag;
                    }
                    else if (t.TraceType.Equals(NSFTraceTags.messageReceivedTag))
                    {
                        if (!traceData.ContainsKey(t.TagAndData[NSFTraceTags.sourceTag]))
                        {
                            traceData.Add(t.TagAndData[NSFTraceTags.sourceTag], new List<Trace>());
                        }
                        mP.setMessage(t.TagAndData[NSFTraceTags.messageTag]);

                        t.TagAndData.Add("Parsed Message", mP.parseMessage());
                        traceData[t.TagAndData[NSFTraceTags.sourceTag]].Add(t);

                        //NSFTraceTags.sourceTag;
                        //NSFTraceTags.messageTag;
                    }
                    else if (t.TraceType.Equals(NSFTraceTags.informationalTag))
                    {
                        if (t.TagAndData.ContainsKey(NSFTraceTags.nameTag))
                        {
                            if (!traceData.ContainsKey(t.TagAndData[NSFTraceTags.nameTag]))
                            {
                                traceData.Add(t.TagAndData[NSFTraceTags.nameTag], new List<Trace>());
                            }
                            traceData[t.TagAndData[NSFTraceTags.nameTag]].Add(t);
                        }
                        else if (t.TagAndData.ContainsKey(NSFTraceTags.sourceTag))
                        {
                            if (!traceData.ContainsKey(t.TagAndData[NSFTraceTags.sourceTag]))
                            {
                                traceData.Add(t.TagAndData[NSFTraceTags.sourceTag], new List<Trace>());
                            }
                            traceData[t.TagAndData[NSFTraceTags.sourceTag]].Add(t);
                        }
                        //NSFTraceTags.sourceTag;
                        //NSFTraceTags.messageTag;
                        //NSFTraceTags.eventTag;
                    }
                    else if (t.TraceType.Equals("IOUpdate"))
                    {
                        if (!traceData.ContainsKey(t.TagAndData[NSFTraceTags.nameTag]))
                        {
                            traceData.Add(t.TagAndData[NSFTraceTags.nameTag], new List<Trace>());
                        }
                        traceData[t.TagAndData[NSFTraceTags.nameTag]].Add(t);
                        //NSFTraceTags.nameTag;
                        //NSFTraceTags.valueTag;
                        //NSFTraceTags.stateTag;
                    }
                    else if (t.TraceType.Equals(NSFTraceTags.errorTag))
                    {
                        if (!traceData.ContainsKey(t.TagAndData[NSFTraceTags.sourceTag]))
                        {
                            traceData.Add(t.TagAndData[NSFTraceTags.sourceTag], new List<Trace>());
                        }
                        traceData[t.TagAndData[NSFTraceTags.sourceTag]].Add(t);
                        //NSFTraceTags.sourceTag;
                        //NSFTraceTags.messageTag;
                    }
                }

            }
        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {

            List<string> actualDataPoints = new List<string>();
            List<string> targetDataPoints = new List<string>();
            List<int> actualTime = new List<int>();
            List<int> targetTime = new List<int>();

            bool isCorrectObject = false;
            bool recordValue = false;
            listView1.Columns.Clear();
            listView1.Items.Clear();

            listView1.Columns.Add("Time", "Time");

            foreach (Trace t in traceList[listBox1.SelectedItem.ToString()])
            {
                List<int> tempTime = new List<int>();
                List<string> tempList = new List<string>();
                isCorrectObject = false;
                ListViewItem item = new ListViewItem();

                foreach (KeyValuePair<string, string> d in t.TagAndData)
                {
                    if (d.Value.Equals(comboBox1.SelectedItem))
                    {
                        
                        DateTime nT = timeSyncDate.AddMilliseconds(t.TraceTime - timeSyncMilliSec);

                        ListViewItem.ListViewSubItem subItem1 = new ListViewItem.ListViewSubItem();
                        subItem1.Text = nT.ToShortDateString() + " " + nT.TimeOfDay.ToString();
                        item.SubItems.Insert(0, subItem1);

                        isCorrectObject = true;
                    }
                    else if( isCorrectObject)
                    {
                        if (!listView1.Columns.ContainsKey(d.Key))
                            listView1.Columns.Add(d.Key, d.Key);
                        int index = listView1.Columns.IndexOfKey(d.Key);
                        ListViewItem.ListViewSubItem subItem = new ListViewItem.ListViewSubItem();
                        subItem.Text = d.Value;
                        while (item.SubItems.Count < index)
                            item.SubItems.Add("");
                        item.SubItems.Insert(index, subItem);
                    }
                    
                }
                if(isCorrectObject)
                    listView1.Items.Add(item);
                isCorrectObject = false;
            }
            foreach (ColumnHeader cH in listView1.Columns)
                cH.AutoResize(ColumnHeaderAutoResizeStyle.ColumnContent);
            //    recordValue = false;

            //    if (t.TraceType.Equals("IOUpdate"))
            //    {
            //        foreach (KeyValuePair<string, string> d in t.TagAndData)
            //        {
            //            if (d.Key.Equals(NSFTraceTags.valueTag))
            //            {
            //                actualDataPoints.Add(d.Value);
            //                actualTime.Add(t.TraceTime - initialTimeStamp);
            //            }
            //        }
            //    }
            //    else
            //    {
            //        foreach (KeyValuePair<string, string> d in t.TagAndData)
            //        {
            //            if (d.Key.Equals(NSFTraceTags.objectTag))// || d.Key.Equals(NSFTraceTags.nameTag))
            //            {
            //                if (d.Value.Equals(comboBox1.SelectedItem))
            //                    isCorrectObject = true;
            //            }
            //            else if (isCorrectObject)
            //            {
            //                if (d.Value.Equals("ActualPosition"))
            //                {
            //                    tempList = actualDataPoints;
            //                    tempTime = actualTime;
            //                    isCorrectObject = false;

            //                    recordValue = true;
            //                }
            //                else if (d.Value == "TargetPosition")
            //                {
            //                    tempList = targetDataPoints;
            //                    tempTime = targetTime;
            //                    isCorrectObject = false;

            //                    recordValue = true;
            //                }
            //            }
            //            else if (recordValue)
            //            {
            //                tempList.Add(d.Value);
            //                tempTime.Add(t.TraceTime - initialTimeStamp);
            //            }
            //        }
            //    }
            //}
            //sciLab.example_readwriteMatrixOfDouble(actualTime, actualDataPoints);
            //sciLab.example_readwriteMatrixOfDouble();
        }

        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            List<string> dropDownItems = new List<string>();
            listView1.Columns.Clear();
            listView1.Items.Clear();
            comboBox1.Items.Clear();

            listView1.Columns.Add("Time", "Time");
            foreach (Trace t in traceList[listBox1.SelectedItem.ToString()])
            {
                ListViewItem item = new ListViewItem();
                DateTime nT = timeSyncDate.AddMilliseconds(t.TraceTime - timeSyncMilliSec);

                ListViewItem.ListViewSubItem subItem1 = new ListViewItem.ListViewSubItem();
                subItem1.Text = nT.ToShortDateString() + " " + nT.TimeOfDay.ToString();
                item.SubItems.Insert(0, subItem1);

                foreach (KeyValuePair<string, string> d in t.TagAndData)
                {
                    if (d.Key.Equals(NSFTraceTags.sourceTag) || d.Key.Equals(NSFTraceTags.stateMachineTag) || d.Key.Equals(NSFTraceTags.objectTag) || d.Key.Equals(NSFTraceTags.nameTag))
                        if (!comboBox1.Items.Contains(d.Value))
                            comboBox1.Items.Add(d.Value);

                    if (!listView1.Columns.ContainsKey(d.Key))
                        listView1.Columns.Add(d.Key, d.Key);
                    int index = listView1.Columns.IndexOfKey(d.Key);
                    ListViewItem.ListViewSubItem subItem = new ListViewItem.ListViewSubItem();
                    subItem.Text = d.Value;
                    while (item.SubItems.Count < index)
                        item.SubItems.Add("");
                    item.SubItems.Insert(index, subItem);
                }
                listView1.Items.Add(item);
            }
            foreach (ColumnHeader cH in listView1.Columns)
                cH.AutoResize(ColumnHeaderAutoResizeStyle.ColumnContent);
        }
        
        private void btnPlot3D_Click(object sender, EventArgs e)
        {
            sciLab.plot3DMotion();
        }

        private void TimelineSelectionChanged(object sender, SelectionChangedEventArgs selectionChangedEventArgs)
        {
            if (null != selectionChangedEventArgs.Deselected)
            {
                foreach (ITimelineTrackBase track in selectionChangedEventArgs.Deselected)
                {
                    Debug.WriteLine("Deselected: " + track);
                }
            }
            if (null != selectionChangedEventArgs.Selected)
            {
                if (selectionChangedEventArgs.Selected is IEnumerable<TimeBeam.IMultiPartTimelineTrack>)
                    return;
                lvConcurrentItems.Columns.Clear();
                lvConcurrentItems.Items.Clear();
                lvConcurrentItems.Columns.Add("Time", "Time");
                lvConcurrentItems.Columns.Add("Type", "Type");
                int windowSize = Convert.ToInt32(nudConcurrencyWindow.Value);

                foreach (ITimelineTrackBase track in selectionChangedEventArgs.Selected)
                {

                    TraceTrackItem trackItem = track as TraceTrackItem;
                    tbTimeLine.Text = "";// track.Name + "  ";
                    foreach(KeyValuePair<string, string> tagData in trackItem.Trace.TagAndData)
                        tbTimeLine.Text += tagData.Key + ": " + tagData.Value + "   ";
                    tbTimeLine.Text += "Started: " + trackItem.Start.ToString() + "   ";
                    tbTimeLine.Text += "Ended: " + trackItem.End.ToString();
                    
                    foreach(TraceTrack tT in timeline1.Tracks)
                    {
                        foreach(TraceTrackItem tI in tT.TrackElements)
                        {
                            ListViewItem item = new ListViewItem();
                            if ((trackItem.Start) > (tI.Start - windowSize) &&
                                (trackItem.Start) < (tI.Start + windowSize))
                            {
                                if (!tI.Name.Equals(track.Name))
                                {
                                    Trace t = tI.Trace;                                   
                                    ListViewItem.ListViewSubItem subItemTime = new ListViewItem.ListViewSubItem();
                                    ListViewItem.ListViewSubItem subItemType = new ListViewItem.ListViewSubItem();
                                    subItemTime.Text = tI.Start.ToString();
                                    item.SubItems.Insert(0, subItemTime);
                                    subItemType.Text = tI.Trace.TraceType;
                                    item.SubItems.Insert(1, subItemType);
                                    
                                    foreach (KeyValuePair<string, string> d in t.TagAndData)
                                    {
                                        if (!lvConcurrentItems.Columns.ContainsKey(d.Key))
                                            lvConcurrentItems.Columns.Add(d.Key, d.Key);
                                        int index = lvConcurrentItems.Columns.IndexOfKey(d.Key);
                                        ListViewItem.ListViewSubItem subItem = new ListViewItem.ListViewSubItem();
                                        subItem.Text = d.Value;
                                        while (item.SubItems.Count < index)
                                            item.SubItems.Add("");
                                        item.SubItems.Insert(index, subItem);
                                    }
                                    lvConcurrentItems.Items.Add(item);
                                }
                            }
                        }
                    }
                    foreach (ColumnHeader cH in lvConcurrentItems.Columns)
                        cH.AutoResize(ColumnHeaderAutoResizeStyle.ColumnContent);
                    lvConcurrentItems.Sort();
                    Debug.WriteLine("Selected: " + track);
                }
            }
        }

    }
}
